@startuml get risk profiles
participant "Apps" as app
participant "ms-gql" as gql
participant "ms-investment" as ms
participant "ms-investment-auth" as auth
collections "DB Investment" as db
participant "Common Service" as cs
participant "Additiv\nDFS" as dfs

activate app
note over app: **Get Risk Profile**
app -> gql: GraphQL query\nriskProfile
activate gql
note right
riskProfile {
  validUntil
  result
  category
}
end note
gql -> ms: GET /risk-profiles
activate ms
ms -> db: query riskProfiles by cif
activate db
db --> ms: return risk profile
deactivate db
opt if db not exists
ms -> cs: POST /v01/customers/searchWithAccount
note right
{
    "filters": [
        {
            "key": "cif", 
            "value": "1AG8DC"
        }
    ]
}
end note
activate cs
cs --> ms: return CRN
ms -> dfs: GET /btpnCustomServiceLayer/v1/contacts/{CRN}/investment-account/status
activate dfs
dfs --> ms: return risk and account
note right
{
  "MutualFundInvestmentAccountStatus": "Unregistered",
  "ChosenRiskCategoryId": 0,
  "RiskCategoryExpiryDate": ISODate
}
end note
deactivate dfs
ms -> db: Save to riskProfiles
note right
cif: String <- CIF
crn: String <- CRN
result: String <- name of ChosenRiskCategoryId
category: Int <- ChosenRiskCategoryId
validUntil: ISODate <- RiskCategoryExpiryDate
modifiedAt: ISODate
expiredAt: ISODate, TTL: 24 hours (parameterized in ENV)
end note
end
ms --> gql: return risk profile result
deactivate ms
gql --> app: return risk profile result
deactivate gql
deactivate app
@enduml