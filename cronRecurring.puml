@startuml mutual funds cron recurring

participant "cron-recurring" as cron
participant "ms-eod-status" as eod
collections "instructions" as instr
queue "ID.JENIUS.RECURRING.MUTUAL_FUNDS_SUB" as kafkaRec
participant "worker-recurring-investment" as wri
collections "instructionConfigurations" as configs
participant "ms-investment-transaction" as mit
participant "WMS" as wms
queue "ID.JENIUS.INVESTMENT.JOURNAL.REQUEST" as kafkaJournal
collections "productInstructions" as recSubs
queue "ID.JENIUS.INVESTMENT.RECURRING.RESPONSE" as kafkaRecRes
participant "worker-recurring-response" as wrr

activate cron
cron -> cron: run every day\n at 6am, 9am, and 12pm
cron -> eod: GET /eq/eod-status
alt isNightMode=true
cron -> cron: end process
end
cron -> instr: query executeDate=today\nstatus=ACTIVE\nisProcessing=false\nprocessingCode=MUTUAL_FUNDS_SUB
cron -> cron: map instructions to messages
cron -> kafkaRec: bulk publish instruction messages
note right
{ 
    cif: String
    recurringId: String
    processingCode: MUTUAL_FUNDS_SUB
    frequency: ONCE/DAILY/DAILY_WEEKDAYS/WEEKLY/MONTHLY
    endCondition: DATE/OCCURENCE/NONE
    startDate: Date
    endDate?: Date
    targetOccurrence?: Number
    occurrence: Number
}
end note
activate kafkaRec
cron -> instr: bulk update isProcessing=true
deactivate cron
kafkaRec -> wri: consume MF sub request
deactivate kafkaRec
activate wri
wri -> configs: query config to map processingCode
wri -> mit: POST /admin/recurring-transactions
deactivate wri
activate mit
mit -> wms: forecast sub transaction
mit -> kafkaJournal: proceed transaction to journal posting
mit -> mit: calculate next executeDate
alt if executeDate=null (instruction completed)
mit -> recSubs: Delete data
end
mit -> kafkaRecRes: Publish recurring response
note right 
{
    cif: String
    recurringId: String
    executedAt: Date
    status: SUCCESS/FAILED/INSUFFICIENT_BALANCE
    nextExecuteDate: Date
}
end note
deactivate mit
activate kafkaRecRes
kafkaRecRes -> wrr: Consume recurring response
deactivate kafkaRecRes
activate wrr
alt if executeDate=null (instruction completed)
wrr -> instr: Delete data
else
wrr -> instr: Update executeDate, occurence, isProcessing=false\nappend histories: [{executedAt, status}]
end
deactivate wrr

@enduml