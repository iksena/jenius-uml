@startuml open account bonds
participant "Apps" as app
participant "BTPN\nJenius Microservices" as ms
collections "DB Investment" as db
queue "BTPN\nKafka" as kafka
participant "Additiv\nDFS" as dfs
participant "BK BCA\nS-Invest" as ksei

activate app
app -> ms: GraphQL mutation\nregisterBondsAccount
note right
registerBondsAccount(input: RegisterBondsAccount!)
input RegisterBondsAccountInput {
  education: String!
  motherName: String
  spouseName: String
}
end note
activate ms
ms -> ms: get and map profile, accounts, and risk profile data
ms -> kafka: Publish customer data\nID.DFS.BONDS.ACCOUNT.REQUEST
note right
cif
fullName
nationality
idCard
passportNo
passportExpiredDate
placeOfBirth
dateOfBirth
phone
email
sex
maritalStatus
motherName
spouseName
education
occupation
occupationIndustry
income
sourceOfIncome
investmentObjective
idCardAddress.address1
idCardAddress.address2
idCardAddress.address3
idCardAddress.city
idCardAddress.zipcode
malingAddress.address1
malingAddress.address2
malingAddress.address3
malingAddress.city
malingAddress.zipcode
bankAccounts[0].currency
bankAccounts[0].accountNumber
bankAccounts[0].bicCode
bankAccounts[0].branchCode
bankAccounts[0].branchName
bankAccounts[1].currency
bankAccounts[1].accountNumber
bankAccounts[1].bicCode
bankAccounts[1].branchCode
bankAccounts[1].branchName
bankAccounts[2].currency
bankAccounts[2].accountNumber
bankAccounts[2].bicCode
bankAccounts[2].branchCode
bankAccounts[2].branchName
end note
activate kafka
ms --> app: response request accepted
deactivate ms
deactivate app
kafka --> dfs: consume register account
deactivate kafka
activate dfs
dfs -> ksei: validate and send customer registration
activate ksei
ksei --> dfs: return SID and AID
deactivate ksei
dfs -> kafka: Publish response customer registration\nID.DFS.BONDS.ACCOUNT.RESPONSE
note left
{
  "CRN": "010000Y3",
  "CIF": "0000Y3",
  "SID": "IDD1604K7688567",
  "AID": "IDD1604K7688567",
  "CustodianBankCode": "ID1",
  "RiskProfileStatusCode":1, 
  "RiskProfileName":"Konservatif", 
  "RiskProfileExpiryDate":"2023-09-07T00:00:00", 
  "BondsAccountStatusCode": "Success",
  "BondsAccountStatusFailReason": "reason from BK BCA",
}
bondsAccountStatusCode list:
IdCardNotFound
DobGenderNotMatch
NameNotMatch
SidDuplicated
SidAlreadyRegistered
Other
end note
deactivate dfs
activate kafka
kafka --> ms: consume registration status
activate ms
ms -> db: Update accounts collection
note right
crn: String <- crn
cif: String <- cif
status: REGISTERED/VERIFYING/UNREGISTERED/FAILED
sid: String <- sid
aid: String <- aid
statusCode: String <- bondsAccountStatusCode
failReason: String <- bondsAccountStatusFailReason
modifiedAt: ISODate
end note
deactivate ms
deactivate kafka

@enduml