@startuml transactions
participant "Apps" as app
participant "BTPN\nJenius Microservices" as ms
collections "DB Investment\nTransaction" as db
queue "BTPN\nKafka" as kafka
participant "Additiv\nDFS" as dfs
participant "BK BCA\nS-Invest" as ksei

activate app
app -> ms: GraphQL query\ncreateInvestmentTransaction
note right
createInvestmentTransaction(input: CreateInvestmentTransactionInput!) {
  status: String
}
input CreateInvestmentTransactionInput {
  forecastChecksum: String!
}
end note

activate ms
ms -> kafka: Publish to Kafka\nID.DFS.BONDS.TRANSACTION.REQUEST
activate kafka
note right
{
  "CIF": "011AIR98",
  "CashAccountNumber": "00193000061",
  "ReferenceNumber": "XXXX1XX1"
  "Transactions": [{
    "ProductIsin": "IDG000015108",
    "ProductCurrency": "IDR",
    "TransactionCategory": "Buy", 
    "InvestmentAmount": 0,
    "Units": 100,
    "IsRedeemAll": false
  }]
}
end note
ms -> db: Save to database\ninflightTransaction
note right
mapped data from forecast
end note
ms --> app: response transaction accepted
deactivate ms
deactivate app

kafka --> dfs: consume transaction request
deactivate kafka

dfs -> kafka: publish status VERIFIED transaction\nID.DFS.BONDS.TRANSACTION.STATUS
note left
{
  "CIF": "String",
  "Channel": "Jenius"
  "Status": "Verified/Settled/Failed"
  "SInvestRejectionReason": ""
  "ReferenceNumber": "String - 12 chars",
  "ProductCode": "String - 6 or more chars",
  "ProductId": "String",
  "TransactionCategory": "Buy/Sell",
  "TransactionDate": "ISODate",
  "SettlementDate": "ISODate",
  "Amount": Number,
  "BuyPriceRate": "String",
  "BuyPrice": Number,
  "TotalAmount": Number,
  "AccrualCouponAmount": Number,
  "AccrualCouponTaxAmount": Number,
  "StampDutyFeeAmount": Number,
  "IsRedeemAll": Boolean,
  "Messages": "String",
  "ErrorCode": "0000"
  "PortfolioId": 12
  "TransactionId": 123
}
end note
activate kafka
kafka --> ms: consume VERIFIED status
activate ms
deactivate kafka
ms -> db: Update database\ninflightTransaction
note right
mapped from inflight data
mapped from kafka
end note
deactivate ms

opt If transaction failed

dfs -> dfs: Operation,system,or KSEI will reject/cancel transaction
dfs -> kafka: publish status FAILED transaction\nto ID.JENIUS.INVESTMENT.TRANSACTION.STATUS
activate kafka
kafka --> ms: consume FAILED status
deactivate kafka
activate ms
ms -> db: Update database\ninflightTransaction
deactivate ms

end opt


dfs -> dfs: Treasury/Operation approve transactions
dfs -> ksei: Report transaction to KSEI
dfs -> kafka: publish status SETTLED transaction\nto ID.DFS.BONDS.TRANSACTION.STATUS
activate kafka
kafka --> ms: consume SETTLED status
deactivate kafka
activate ms
ms -> db: Update database\ninflightTransaction
deactivate ms

deactivate dfs

@enduml